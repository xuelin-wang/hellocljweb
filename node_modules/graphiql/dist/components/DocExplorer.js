'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocExplorer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _graphql = require('graphql');

var _FieldDoc = require('./DocExplorer/FieldDoc');

var _FieldDoc2 = _interopRequireDefault(_FieldDoc);

var _SchemaDoc = require('./DocExplorer/SchemaDoc');

var _SchemaDoc2 = _interopRequireDefault(_SchemaDoc);

var _SearchBox = require('./DocExplorer/SearchBox');

var _SearchBox2 = _interopRequireDefault(_SearchBox);

var _SearchResults = require('./DocExplorer/SearchResults');

var _SearchResults2 = _interopRequireDefault(_SearchResults);

var _TypeDoc = require('./DocExplorer/TypeDoc');

var _TypeDoc2 = _interopRequireDefault(_TypeDoc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
opyright (c) 2015, Facebook, Inc.
ll rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
his source code is licensed under the license found in the
examples file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * DocExplorer
 *
 * Shows documentations for GraphQL definitions from the schema.
 *
 * Props:
 *
 *   - schema: A required GraphQLSchema instance that provides GraphQL document
 *     definitions.
 *
 * Children:
 *
 *   - Any provided children will be positioned in the right-hand-side of the
 *     top bar. Typically this will be a "close" button for temporary explorer.
 *
 */
var DocExplorer = exports.DocExplorer = function (_React$Component) {
  _inherits(DocExplorer, _React$Component);

  function DocExplorer() {
    _classCallCheck(this, DocExplorer);

    var _this = _possibleConstructorReturn(this, (DocExplorer.__proto__ || Object.getPrototypeOf(DocExplorer)).call(this));

    _this.handleNavBackClick = function () {
      _this.setState({ navStack: _this.state.navStack.slice(0, -1) });
    };

    _this.handleClickTypeOrField = function (typeOrField) {
      _this.showDoc(typeOrField);
    };

    _this.handleSearch = function (value) {
      _this.showSearch({
        name: 'Search Results',
        searchValue: value
      });
    };

    _this.state = { navStack: [] };
    return _this;
  }

  _createClass(DocExplorer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return this.props.schema !== nextProps.schema || this.state.navStack !== nextState.navStack || this.state.searchValue !== nextState.searchValue;
    }
  }, {
    key: 'render',
    value: function render() {
      var schema = this.props.schema;
      var navStack = this.state.navStack;

      var navItem = void 0;
      if (navStack.length > 0) {
        navItem = navStack[navStack.length - 1];
      }

      var title = void 0;
      var content = void 0;
      if (navItem) {
        if (navItem.name === 'Search Results') {
          title = navItem.name;
          content = _react2.default.createElement(_SearchResults2.default, {
            searchValue: navItem.searchValue,
            schema: schema,
            onClickType: this.handleClickTypeOrField,
            onClickField: this.handleClickTypeOrField
          });
        } else {
          title = navItem.name;
          if ((0, _graphql.isType)(navItem)) {
            content = _react2.default.createElement(_TypeDoc2.default, {
              key: navItem.name,
              schema: schema,
              type: navItem,
              onClickType: this.handleClickTypeOrField,
              onClickField: this.handleClickTypeOrField
            });
          } else {
            content = _react2.default.createElement(_FieldDoc2.default, {
              key: navItem.name,
              field: navItem,
              onClickType: this.handleClickTypeOrField
            });
          }
        }
      } else if (schema) {
        title = 'Documentation Explorer';
        content = _react2.default.createElement(_SchemaDoc2.default, { schema: schema, onClickType: this.handleClickTypeOrField });
      }

      var prevName = void 0;
      if (navStack.length === 1) {
        prevName = 'Schema';
      } else if (navStack.length > 1) {
        prevName = navStack[navStack.length - 2].name;
      }

      var spinnerDiv = _react2.default.createElement(
        'div',
        { className: 'spinner-container' },
        _react2.default.createElement('div', { className: 'spinner' })
      );

      var shouldSearchBoxAppear = content && (content.type === _SearchResults2.default || content.type === _SchemaDoc2.default);

      return _react2.default.createElement(
        'div',
        { className: 'doc-explorer' },
        _react2.default.createElement(
          'div',
          { className: 'doc-explorer-title-bar' },
          prevName && _react2.default.createElement(
            'div',
            {
              className: 'doc-explorer-back',
              onClick: this.handleNavBackClick },
            prevName
          ),
          _react2.default.createElement(
            'div',
            { className: 'doc-explorer-title' },
            title
          ),
          _react2.default.createElement(
            'div',
            { className: 'doc-explorer-rhs' },
            this.props.children
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'doc-explorer-contents' },
          _react2.default.createElement(_SearchBox2.default, {
            isShown: shouldSearchBoxAppear,
            onSearch: this.handleSearch
          }),
          this.props.schema ? content : spinnerDiv
        )
      );
    }

    // Public API

  }, {
    key: 'showDoc',
    value: function showDoc(typeOrField) {
      var navStack = this.state.navStack;
      var isCurrentlyShown = navStack.length > 0 && navStack[navStack.length - 1] === typeOrField;
      if (!isCurrentlyShown) {
        navStack = navStack.concat([typeOrField]);
      }

      this.setState({ navStack: navStack });
    }

    // Public API

  }, {
    key: 'showSearch',
    value: function showSearch(searchItem) {
      var navStack = this.state.navStack;
      var lastEntry = navStack.length > 0 && navStack[navStack.length - 1];
      if (!lastEntry) {
        navStack = navStack.concat([searchItem]);
      } else if (lastEntry.searchValue !== searchItem.searchValue) {
        navStack = navStack.slice(0, -1).concat([searchItem]);
      }

      this.setState({ navStack: navStack });
    }
  }]);

  return DocExplorer;
}(_react2.default.Component);

DocExplorer.propTypes = {
  schema: _react.PropTypes.instanceOf(_graphql.GraphQLSchema)
};